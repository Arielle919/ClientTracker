#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/parse_arguments'

command = ARGV[0]
options = ParseArguments.parse
options[:firstname] = ARGV[1]
options[:lastname] = ARGV[2]

if command == "search"
  puts "What do you want to search for?"
  input = $stdin.gets
  puts "You asked for: #{input}"
  # searching!
else
  error_messages = ParseArguments.validate(options)
  if error_messages.empty?
    require "sqlite3"
    database = Environment.database_connection(options[:environment])
    # This is ripe for a SQL injection attack:
    statement = "insert into Clients(Firstname, Lastname, Appointment, Task) values('#{options[:firstname]}', '#{options[:lastname]}', #{options[:date]}, '#{options[:task]}')"
    database.execute(statement)
    puts "Theoretically creating: a Client named #{options[:firstname]} #{options[:lastname]}, appointment date: #{options[:date]} and Client Task: #{options[:task]}"
  else
    puts error_messages
  end
end








