#!/usr/bin/env ruby
require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'

# Router:
class ClientTracker
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
    @database = Environment.database_connection
  end

  def main
    if options[:command] == "start"
      show_directions()
    elsif options[:command] == "search"
      search_clients()
    elsif options[:command] == "add"
      add_clients()
    elsif options[:command] == "list"
      list_clients()
    elsif options[:command] == "delete"
      delete_rows()
    elsif options[:command] == "client appointments"
      list_appointments()
    elsif options[:command] == "need appointments"
      need_appointments()
    elsif options[:command] == "task incomplete"
      task_processing()
    elsif options[:command] == "task complete"
      task_complete()
    elsif options[:command] == "edit"
      edit_client()
    end
  end

  def show_directions()
    directions = ["WELCOME TO CLIENT TRACKER",
      "Client Tracker is a command application where you can create, edit, and save your clients.",
      "INSTRUCTIONS:",
      "CREATE CLIENT: ruby clienttracker add 'client name' --appointment mm/dd/yyyy --task 'client task'",
      "EDIT CLIENT: ruby clienttracker edit 'client name' --appointment mm/dd/yyyy --task 'client task'",
      "DELETE CLIENT: ruby clienttracker delete --id 01",
      "LIST ALL CLIENTS ruby clienttracker 'list'",
      "SEARCH CLIENT: ruby clienttracker search",
      "LIST CLIENTS THAT NEED APPOINTMENT: ruby clienttracker 'need appointments'",
      "LIST APPOINTMENTS FOR 1 CLIENT: ruby clienttracker 'client appointments' --name 'client name'",
      "LIST INCOMPLETE TASK: ruby clienttracker 'task incomplete'",
      "LIST COMPLETE TASK: ruby clienttracker 'task complete'"]
    directions.each_slice(1) { |line|
    puts line.join(" ").center(100)
    }
  end

  def search_clients()
    search_term = ask("What do you want to search for?")
    puts "You asked for: #{search_term}"
    puts Client.search(search_term)
  end

  def add_clients()
    error_messages = ArgumentParser.validate(options)
    if error_messages.empty?
      client = Client.new(options)
      appointments = Appointment.new(options)
      tasks = Task.new(options)
      appointments.save
      client.save
      tasks.save
      puts "A client named #{client.name}, #{client.appointment}, #{client.task} was created."
    else
      puts error_messages
    end
  end

  def list_clients()
    puts "All Clients:"
    show_clients = @database.execute("SELECT * FROM clients")
    columns = ["ID", "NAME", "APPOINTMENT", "TASK"]
    columns.each_slice(4) { |line|
      puts line.join(" ".center(8))
    }
    show_clients.each_slice(1) { |line|
    puts line.join(" --"+" ")
    }
  end


  def delete_rows()
    if client = Client.find(options[:id])
      delTasks = @database.execute("DELETE FROM tasks WHERE id = '#{client.id}'")
      delApps = @database.execute("DELETE FROM appointments WHERE id = '#{client.id}'")
      delClients = @database.execute("DELETE FROM clients WHERE id = '#{client.id}'")
      delApps
      delClients
      delTasks
        puts "client '#{client.id}' named: '#{client.name}' was deleted."
    else
      puts "Client Id doesn't exist!!!"
    end
  end

  def list_appointments()
    appointment_id = options[:id]
    appointment_name = options[:name]
    @database.results_as_hash = false
    puts "All Appointments for #{appointment_name}:"
    results_appointments = @database.execute("SELECT appointments.id, appointments.name, appointments.appointment FROM appointments WHERE name = '#{appointment_name}' ORDER by name ASC")
    columns = ["ID", "NAME", "APPOINTMENT"]
    columns.each_slice(3) { |line|
      puts line.join(" ".center(10))
    }
    results_appointments.each_slice(1) { |apps|
        puts apps.join(" -- "+" ")
    }
  end

  def need_appointments()
    appointment_id = options[:id]
    @database.results_as_hash = false
    puts "Clients Need Appointments:"
    columns = ["ID", "NAME"]
    columns.each_slice(2) { |line|
      puts line.join(" ".center(5))
    }
    needApp = @database.execute("SELECT appointments.id, appointments.name FROM appointments WHERE appointments.needAppointment = 'yes'")
    needApp.each_slice(1) { |needapps|
        puts needapps.join(" -- "+" ")
    }
  end

  def task_processing()
    task_id = options[:id]
    @database.results_as_hash = false
    puts "Incomplete Task:"
    uncomTask = @database.execute("SELECT tasks.id, tasks.name, tasks.appointment, tasks.task FROM tasks WHERE tasks.taskCompleted = 'no'")
    columns = ["ID", "NAME", "APPOINTMENT", "TASK"]
    columns.each_slice(4) { |line|
      puts line.join(" ".center(10))
    }
    uncomTask.each_slice(1) { |task|
        puts task.join(" -- "+" ")
    }
  end

  def task_complete()
    task_id = options[:id]
    @database.results_as_hash = false
    puts "Task Complete:"
    comTask = @database.execute("SELECT tasks.id, tasks.name, tasks.appointment, tasks.task FROM tasks WHERE tasks.taskCompleted = 'yes'")
    columns = ["ID", "NAME", "APPOINTMENT", "TASK"]
    columns.each_slice(4) { |line|
      puts line.join(" ".center(9))
    }
    comTask.each_slice(1) { |task|
        puts task.join(" -- "+" ")
    }
  end

  def edit_client()
    case options[:appointment]
    when /January/, /February/, /March/, /April/, /May/, /June/, /July/
        puts "Client can't be updated.  Date must be in this format: mm/dd/yyyy."
    when /August/, /September/, /October/, /November/, /December/
        puts "Client can't be updated.  Date must be in this format: mm/dd/yyyy."
    else
      if client = Client.find(options[:id])
        appointments = Appointment.find(options[:id])
        tasks = Task.find(options[:id])
        client.update(options)
        appointments.update(options)
        tasks.update(options)
        puts "Client #{client.id} is now named #{client.name}, #{client.appointment}, #{client.task}."
      else
        puts "Client #{options[:id]} couldn't be found."
      end
    end
  end

end

clienttracker = ClientTracker.new()
clienttracker.main()

